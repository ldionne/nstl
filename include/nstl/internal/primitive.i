
    static void nstl_mangled_ctor_nstl_bool(nstl_bool *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_nstl_bool(nstl_bool *self, nstl_bool other) { *self = other; } static void nstl_mangled_dtor_nstl_bool(nstl_bool *self) { do { (void)self; } while (0); } static nstl_bool *nstl_mangled_new_nstl_bool(void) { return malloc(sizeof(nstl_bool)); } static void nstl_mangled_delete_nstl_bool(nstl_bool *self) { free(self); } static nstl_bool nstl_mangled_eq_nstl_bool_nstl_bool(nstl_bool x, nstl_bool y) { return x == y; } static nstl_bool nstl_mangled_ne_nstl_bool_nstl_bool(nstl_bool x, nstl_bool y) { return x != y; } static nstl_bool nstl_mangled_gt_nstl_bool_nstl_bool(nstl_bool x, nstl_bool y) { return x > y; } static nstl_bool nstl_mangled_lt_nstl_bool_nstl_bool(nstl_bool x, nstl_bool y) { return x < y; } static nstl_bool nstl_mangled_ge_nstl_bool_nstl_bool(nstl_bool x, nstl_bool y) { return x >= y; } static nstl_bool nstl_mangled_le_nstl_bool_nstl_bool(nstl_bool x, nstl_bool y) { return x <= y; } static nstl_bool nstl_mangled_not_nstl_bool(nstl_bool self) { return !self; } static nstl_bool nstl_mangled_compl_nstl_bool(nstl_bool self) { return ~self; } static nstl_bool nstl_mangled_and_nstl_bool_nstl_bool(nstl_bool x, nstl_bool y) { return x & y; } static nstl_bool nstl_mangled_or_nstl_bool_nstl_bool(nstl_bool x, nstl_bool y) { return x | y; } static nstl_bool nstl_mangled_xor_nstl_bool_nstl_bool(nstl_bool x, nstl_bool y) { return x ^ y; } static nstl_bool nstl_mangled_iand_nstl_bool_nstl_bool(nstl_bool *self, nstl_bool other) { return (*self) &= other; } static nstl_bool nstl_mangled_ior_nstl_bool_nstl_bool(nstl_bool *self, nstl_bool other) { return (*self) |= other; } static nstl_bool nstl_mangled_ixor_nstl_bool_nstl_bool(nstl_bool *self, nstl_bool other) { return (*self) ^= other; }
    static void nstl_mangled_ctor_float(float *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_float(float *self, float other) { *self = other; } static void nstl_mangled_dtor_float(float *self) { do { (void)self; } while (0); } static float *nstl_mangled_new_float(void) { return malloc(sizeof(float)); } static void nstl_mangled_delete_float(float *self) { free(self); } static float nstl_mangled_asg_float_float(float *self, float other) { return (*self) = other; } static float nstl_mangled_add_float_float(float x, float y) { return x + y; } static float nstl_mangled_sub_float_float(float x, float y) { return x - y; } static float nstl_mangled_mul_float_float(float x, float y) { return x * y; } static float nstl_mangled_div_float_float(float x, float y) { return x / y; } static float nstl_mangled_inc_float(float *self) { return ++(*self); } static float nstl_mangled_inc__float(float *self) { return (*self)++; } static float nstl_mangled_dec_float(float *self) { return --(*self); } static float nstl_mangled_dec__float(float *self) { return (*self)--; } static float nstl_mangled_prom_float(float self) { return +self; } static float nstl_mangled_inv_float(float self) { return -self; } static float nstl_mangled_iadd_float_float(float *self, float other) { return (*self) += other; } static float nstl_mangled_isub_float_float(float *self, float other) { return (*self) -= other; } static float nstl_mangled_imul_float_float(float *self, float other) { return (*self) *= other; } static float nstl_mangled_idiv_float_float(float *self, float other) { return (*self) /= other; } static nstl_bool nstl_mangled_eq_float_float(float x, float y) { return x == y; } static nstl_bool nstl_mangled_ne_float_float(float x, float y) { return x != y; } static nstl_bool nstl_mangled_gt_float_float(float x, float y) { return x > y; } static nstl_bool nstl_mangled_lt_float_float(float x, float y) { return x < y; } static nstl_bool nstl_mangled_ge_float_float(float x, float y) { return x >= y; } static nstl_bool nstl_mangled_le_float_float(float x, float y) { return x <= y; } static nstl_bool nstl_mangled_not_float(float self) { return !self; }
    static void nstl_mangled_ctor_double(double *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_double(double *self, double other) { *self = other; } static void nstl_mangled_dtor_double(double *self) { do { (void)self; } while (0); } static double *nstl_mangled_new_double(void) { return malloc(sizeof(double)); } static void nstl_mangled_delete_double(double *self) { free(self); } static double nstl_mangled_asg_double_double(double *self, double other) { return (*self) = other; } static double nstl_mangled_add_double_double(double x, double y) { return x + y; } static double nstl_mangled_sub_double_double(double x, double y) { return x - y; } static double nstl_mangled_mul_double_double(double x, double y) { return x * y; } static double nstl_mangled_div_double_double(double x, double y) { return x / y; } static double nstl_mangled_inc_double(double *self) { return ++(*self); } static double nstl_mangled_inc__double(double *self) { return (*self)++; } static double nstl_mangled_dec_double(double *self) { return --(*self); } static double nstl_mangled_dec__double(double *self) { return (*self)--; } static double nstl_mangled_prom_double(double self) { return +self; } static double nstl_mangled_inv_double(double self) { return -self; } static double nstl_mangled_iadd_double_double(double *self, double other) { return (*self) += other; } static double nstl_mangled_isub_double_double(double *self, double other) { return (*self) -= other; } static double nstl_mangled_imul_double_double(double *self, double other) { return (*self) *= other; } static double nstl_mangled_idiv_double_double(double *self, double other) { return (*self) /= other; } static nstl_bool nstl_mangled_eq_double_double(double x, double y) { return x == y; } static nstl_bool nstl_mangled_ne_double_double(double x, double y) { return x != y; } static nstl_bool nstl_mangled_gt_double_double(double x, double y) { return x > y; } static nstl_bool nstl_mangled_lt_double_double(double x, double y) { return x < y; } static nstl_bool nstl_mangled_ge_double_double(double x, double y) { return x >= y; } static nstl_bool nstl_mangled_le_double_double(double x, double y) { return x <= y; } static nstl_bool nstl_mangled_not_double(double self) { return !self; }
    static void nstl_mangled_ctor_nstl_long_double(nstl_long_double *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_nstl_long_double(nstl_long_double *self, nstl_long_double other) { *self = other; } static void nstl_mangled_dtor_nstl_long_double(nstl_long_double *self) { do { (void)self; } while (0); } static nstl_long_double *nstl_mangled_new_nstl_long_double(void) { return malloc(sizeof(nstl_long_double)); } static void nstl_mangled_delete_nstl_long_double(nstl_long_double *self) { free(self); } static nstl_long_double nstl_mangled_asg_nstl_long_double_nstl_long_double(nstl_long_double *self, nstl_long_double other) { return (*self) = other; } static nstl_long_double nstl_mangled_add_nstl_long_double_nstl_long_double(nstl_long_double x, nstl_long_double y) { return x + y; } static nstl_long_double nstl_mangled_sub_nstl_long_double_nstl_long_double(nstl_long_double x, nstl_long_double y) { return x - y; } static nstl_long_double nstl_mangled_mul_nstl_long_double_nstl_long_double(nstl_long_double x, nstl_long_double y) { return x * y; } static nstl_long_double nstl_mangled_div_nstl_long_double_nstl_long_double(nstl_long_double x, nstl_long_double y) { return x / y; } static nstl_long_double nstl_mangled_inc_nstl_long_double(nstl_long_double *self) { return ++(*self); } static nstl_long_double nstl_mangled_inc__nstl_long_double(nstl_long_double *self) { return (*self)++; } static nstl_long_double nstl_mangled_dec_nstl_long_double(nstl_long_double *self) { return --(*self); } static nstl_long_double nstl_mangled_dec__nstl_long_double(nstl_long_double *self) { return (*self)--; } static nstl_long_double nstl_mangled_prom_nstl_long_double(nstl_long_double self) { return +self; } static nstl_long_double nstl_mangled_inv_nstl_long_double(nstl_long_double self) { return -self; } static nstl_long_double nstl_mangled_iadd_nstl_long_double_nstl_long_double(nstl_long_double *self, nstl_long_double other) { return (*self) += other; } static nstl_long_double nstl_mangled_isub_nstl_long_double_nstl_long_double(nstl_long_double *self, nstl_long_double other) { return (*self) -= other; } static nstl_long_double nstl_mangled_imul_nstl_long_double_nstl_long_double(nstl_long_double *self, nstl_long_double other) { return (*self) *= other; } static nstl_long_double nstl_mangled_idiv_nstl_long_double_nstl_long_double(nstl_long_double *self, nstl_long_double other) { return (*self) /= other; } static nstl_bool nstl_mangled_eq_nstl_long_double_nstl_long_double(nstl_long_double x, nstl_long_double y) { return x == y; } static nstl_bool nstl_mangled_ne_nstl_long_double_nstl_long_double(nstl_long_double x, nstl_long_double y) { return x != y; } static nstl_bool nstl_mangled_gt_nstl_long_double_nstl_long_double(nstl_long_double x, nstl_long_double y) { return x > y; } static nstl_bool nstl_mangled_lt_nstl_long_double_nstl_long_double(nstl_long_double x, nstl_long_double y) { return x < y; } static nstl_bool nstl_mangled_ge_nstl_long_double_nstl_long_double(nstl_long_double x, nstl_long_double y) { return x >= y; } static nstl_bool nstl_mangled_le_nstl_long_double_nstl_long_double(nstl_long_double x, nstl_long_double y) { return x <= y; } static nstl_bool nstl_mangled_not_nstl_long_double(nstl_long_double self) { return !self; }
    static void nstl_mangled_ctor_nstl_schar(nstl_schar *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_nstl_schar(nstl_schar *self, nstl_schar other) { *self = other; } static void nstl_mangled_dtor_nstl_schar(nstl_schar *self) { do { (void)self; } while (0); } static nstl_schar *nstl_mangled_new_nstl_schar(void) { return malloc(sizeof(nstl_schar)); } static void nstl_mangled_delete_nstl_schar(nstl_schar *self) { free(self); } static nstl_schar nstl_mangled_asg_nstl_schar_nstl_schar(nstl_schar *self, nstl_schar other) { return (*self) = other; } static nstl_schar nstl_mangled_add_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x + y; } static nstl_schar nstl_mangled_sub_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x - y; } static nstl_schar nstl_mangled_mul_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x * y; } static nstl_schar nstl_mangled_div_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x / y; } static nstl_schar nstl_mangled_mod_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x % y; } static nstl_schar nstl_mangled_inc_nstl_schar(nstl_schar *self) { return ++(*self); } static nstl_schar nstl_mangled_inc__nstl_schar(nstl_schar *self) { return (*self)++; } static nstl_schar nstl_mangled_dec_nstl_schar(nstl_schar *self) { return --(*self); } static nstl_schar nstl_mangled_dec__nstl_schar(nstl_schar *self) { return (*self)--; } static nstl_schar nstl_mangled_prom_nstl_schar(nstl_schar self) { return +self; } static nstl_schar nstl_mangled_inv_nstl_schar(nstl_schar self) { return -self; } static nstl_schar nstl_mangled_iadd_nstl_schar_nstl_schar(nstl_schar *self, nstl_schar other) { return (*self) += other; } static nstl_schar nstl_mangled_isub_nstl_schar_nstl_schar(nstl_schar *self, nstl_schar other) { return (*self) -= other; } static nstl_schar nstl_mangled_imul_nstl_schar_nstl_schar(nstl_schar *self, nstl_schar other) { return (*self) *= other; } static nstl_schar nstl_mangled_idiv_nstl_schar_nstl_schar(nstl_schar *self, nstl_schar other) { return (*self) /= other; } static nstl_schar nstl_mangled_imod_nstl_schar_nstl_schar(nstl_schar *self, nstl_schar other) { return (*self) %= other; } static nstl_bool nstl_mangled_eq_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x == y; } static nstl_bool nstl_mangled_ne_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x != y; } static nstl_bool nstl_mangled_gt_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x > y; } static nstl_bool nstl_mangled_lt_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x < y; } static nstl_bool nstl_mangled_ge_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x >= y; } static nstl_bool nstl_mangled_le_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x <= y; } static nstl_bool nstl_mangled_not_nstl_schar(nstl_schar self) { return !self; } static nstl_schar nstl_mangled_compl_nstl_schar(nstl_schar self) { return ~self; } static nstl_schar nstl_mangled_and_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x & y; } static nstl_schar nstl_mangled_or_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x | y; } static nstl_schar nstl_mangled_xor_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x ^ y; } static nstl_schar nstl_mangled_lshift_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x << y; } static nstl_schar nstl_mangled_rshift_nstl_schar_nstl_schar(nstl_schar x, nstl_schar y) { return x >> y; } static nstl_schar nstl_mangled_iand_nstl_schar_nstl_schar(nstl_schar *self, nstl_schar other) { return (*self) &= other; } static nstl_schar nstl_mangled_ior_nstl_schar_nstl_schar(nstl_schar *self, nstl_schar other) { return (*self) |= other; } static nstl_schar nstl_mangled_ixor_nstl_schar_nstl_schar(nstl_schar *self, nstl_schar other) { return (*self) ^= other; } static nstl_schar nstl_mangled_ilshift_nstl_schar_nstl_schar(nstl_schar *self, nstl_schar other) { return (*self) <<= other; } static nstl_schar nstl_mangled_irshift_nstl_schar_nstl_schar(nstl_schar *self, nstl_schar other) { return (*self) >>= other; }
    static void nstl_mangled_ctor_char(char *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_char(char *self, char other) { *self = other; } static void nstl_mangled_dtor_char(char *self) { do { (void)self; } while (0); } static char *nstl_mangled_new_char(void) { return malloc(sizeof(char)); } static void nstl_mangled_delete_char(char *self) { free(self); } static char nstl_mangled_asg_char_char(char *self, char other) { return (*self) = other; } static char nstl_mangled_add_char_char(char x, char y) { return x + y; } static char nstl_mangled_sub_char_char(char x, char y) { return x - y; } static char nstl_mangled_mul_char_char(char x, char y) { return x * y; } static char nstl_mangled_div_char_char(char x, char y) { return x / y; } static char nstl_mangled_mod_char_char(char x, char y) { return x % y; } static char nstl_mangled_inc_char(char *self) { return ++(*self); } static char nstl_mangled_inc__char(char *self) { return (*self)++; } static char nstl_mangled_dec_char(char *self) { return --(*self); } static char nstl_mangled_dec__char(char *self) { return (*self)--; } static char nstl_mangled_prom_char(char self) { return +self; } static char nstl_mangled_inv_char(char self) { return -self; } static char nstl_mangled_iadd_char_char(char *self, char other) { return (*self) += other; } static char nstl_mangled_isub_char_char(char *self, char other) { return (*self) -= other; } static char nstl_mangled_imul_char_char(char *self, char other) { return (*self) *= other; } static char nstl_mangled_idiv_char_char(char *self, char other) { return (*self) /= other; } static char nstl_mangled_imod_char_char(char *self, char other) { return (*self) %= other; } static nstl_bool nstl_mangled_eq_char_char(char x, char y) { return x == y; } static nstl_bool nstl_mangled_ne_char_char(char x, char y) { return x != y; } static nstl_bool nstl_mangled_gt_char_char(char x, char y) { return x > y; } static nstl_bool nstl_mangled_lt_char_char(char x, char y) { return x < y; } static nstl_bool nstl_mangled_ge_char_char(char x, char y) { return x >= y; } static nstl_bool nstl_mangled_le_char_char(char x, char y) { return x <= y; } static nstl_bool nstl_mangled_not_char(char self) { return !self; } static char nstl_mangled_compl_char(char self) { return ~self; } static char nstl_mangled_and_char_char(char x, char y) { return x & y; } static char nstl_mangled_or_char_char(char x, char y) { return x | y; } static char nstl_mangled_xor_char_char(char x, char y) { return x ^ y; } static char nstl_mangled_lshift_char_char(char x, char y) { return x << y; } static char nstl_mangled_rshift_char_char(char x, char y) { return x >> y; } static char nstl_mangled_iand_char_char(char *self, char other) { return (*self) &= other; } static char nstl_mangled_ior_char_char(char *self, char other) { return (*self) |= other; } static char nstl_mangled_ixor_char_char(char *self, char other) { return (*self) ^= other; } static char nstl_mangled_ilshift_char_char(char *self, char other) { return (*self) <<= other; } static char nstl_mangled_irshift_char_char(char *self, char other) { return (*self) >>= other; }
    static void nstl_mangled_ctor_nstl_uchar(nstl_uchar *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_nstl_uchar(nstl_uchar *self, nstl_uchar other) { *self = other; } static void nstl_mangled_dtor_nstl_uchar(nstl_uchar *self) { do { (void)self; } while (0); } static nstl_uchar *nstl_mangled_new_nstl_uchar(void) { return malloc(sizeof(nstl_uchar)); } static void nstl_mangled_delete_nstl_uchar(nstl_uchar *self) { free(self); } static nstl_uchar nstl_mangled_asg_nstl_uchar_nstl_uchar(nstl_uchar *self, nstl_uchar other) { return (*self) = other; } static nstl_uchar nstl_mangled_add_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x + y; } static nstl_uchar nstl_mangled_sub_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x - y; } static nstl_uchar nstl_mangled_mul_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x * y; } static nstl_uchar nstl_mangled_div_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x / y; } static nstl_uchar nstl_mangled_mod_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x % y; } static nstl_uchar nstl_mangled_inc_nstl_uchar(nstl_uchar *self) { return ++(*self); } static nstl_uchar nstl_mangled_inc__nstl_uchar(nstl_uchar *self) { return (*self)++; } static nstl_uchar nstl_mangled_dec_nstl_uchar(nstl_uchar *self) { return --(*self); } static nstl_uchar nstl_mangled_dec__nstl_uchar(nstl_uchar *self) { return (*self)--; } static nstl_uchar nstl_mangled_prom_nstl_uchar(nstl_uchar self) { return +self; } static nstl_uchar nstl_mangled_inv_nstl_uchar(nstl_uchar self) { return -self; } static nstl_uchar nstl_mangled_iadd_nstl_uchar_nstl_uchar(nstl_uchar *self, nstl_uchar other) { return (*self) += other; } static nstl_uchar nstl_mangled_isub_nstl_uchar_nstl_uchar(nstl_uchar *self, nstl_uchar other) { return (*self) -= other; } static nstl_uchar nstl_mangled_imul_nstl_uchar_nstl_uchar(nstl_uchar *self, nstl_uchar other) { return (*self) *= other; } static nstl_uchar nstl_mangled_idiv_nstl_uchar_nstl_uchar(nstl_uchar *self, nstl_uchar other) { return (*self) /= other; } static nstl_uchar nstl_mangled_imod_nstl_uchar_nstl_uchar(nstl_uchar *self, nstl_uchar other) { return (*self) %= other; } static nstl_bool nstl_mangled_eq_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x == y; } static nstl_bool nstl_mangled_ne_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x != y; } static nstl_bool nstl_mangled_gt_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x > y; } static nstl_bool nstl_mangled_lt_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x < y; } static nstl_bool nstl_mangled_ge_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x >= y; } static nstl_bool nstl_mangled_le_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x <= y; } static nstl_bool nstl_mangled_not_nstl_uchar(nstl_uchar self) { return !self; } static nstl_uchar nstl_mangled_compl_nstl_uchar(nstl_uchar self) { return ~self; } static nstl_uchar nstl_mangled_and_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x & y; } static nstl_uchar nstl_mangled_or_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x | y; } static nstl_uchar nstl_mangled_xor_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x ^ y; } static nstl_uchar nstl_mangled_lshift_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x << y; } static nstl_uchar nstl_mangled_rshift_nstl_uchar_nstl_uchar(nstl_uchar x, nstl_uchar y) { return x >> y; } static nstl_uchar nstl_mangled_iand_nstl_uchar_nstl_uchar(nstl_uchar *self, nstl_uchar other) { return (*self) &= other; } static nstl_uchar nstl_mangled_ior_nstl_uchar_nstl_uchar(nstl_uchar *self, nstl_uchar other) { return (*self) |= other; } static nstl_uchar nstl_mangled_ixor_nstl_uchar_nstl_uchar(nstl_uchar *self, nstl_uchar other) { return (*self) ^= other; } static nstl_uchar nstl_mangled_ilshift_nstl_uchar_nstl_uchar(nstl_uchar *self, nstl_uchar other) { return (*self) <<= other; } static nstl_uchar nstl_mangled_irshift_nstl_uchar_nstl_uchar(nstl_uchar *self, nstl_uchar other) { return (*self) >>= other; }
    static void nstl_mangled_ctor_short(short *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_short(short *self, short other) { *self = other; } static void nstl_mangled_dtor_short(short *self) { do { (void)self; } while (0); } static short *nstl_mangled_new_short(void) { return malloc(sizeof(short)); } static void nstl_mangled_delete_short(short *self) { free(self); } static short nstl_mangled_asg_short_short(short *self, short other) { return (*self) = other; } static short nstl_mangled_add_short_short(short x, short y) { return x + y; } static short nstl_mangled_sub_short_short(short x, short y) { return x - y; } static short nstl_mangled_mul_short_short(short x, short y) { return x * y; } static short nstl_mangled_div_short_short(short x, short y) { return x / y; } static short nstl_mangled_mod_short_short(short x, short y) { return x % y; } static short nstl_mangled_inc_short(short *self) { return ++(*self); } static short nstl_mangled_inc__short(short *self) { return (*self)++; } static short nstl_mangled_dec_short(short *self) { return --(*self); } static short nstl_mangled_dec__short(short *self) { return (*self)--; } static short nstl_mangled_prom_short(short self) { return +self; } static short nstl_mangled_inv_short(short self) { return -self; } static short nstl_mangled_iadd_short_short(short *self, short other) { return (*self) += other; } static short nstl_mangled_isub_short_short(short *self, short other) { return (*self) -= other; } static short nstl_mangled_imul_short_short(short *self, short other) { return (*self) *= other; } static short nstl_mangled_idiv_short_short(short *self, short other) { return (*self) /= other; } static short nstl_mangled_imod_short_short(short *self, short other) { return (*self) %= other; } static nstl_bool nstl_mangled_eq_short_short(short x, short y) { return x == y; } static nstl_bool nstl_mangled_ne_short_short(short x, short y) { return x != y; } static nstl_bool nstl_mangled_gt_short_short(short x, short y) { return x > y; } static nstl_bool nstl_mangled_lt_short_short(short x, short y) { return x < y; } static nstl_bool nstl_mangled_ge_short_short(short x, short y) { return x >= y; } static nstl_bool nstl_mangled_le_short_short(short x, short y) { return x <= y; } static nstl_bool nstl_mangled_not_short(short self) { return !self; } static short nstl_mangled_compl_short(short self) { return ~self; } static short nstl_mangled_and_short_short(short x, short y) { return x & y; } static short nstl_mangled_or_short_short(short x, short y) { return x | y; } static short nstl_mangled_xor_short_short(short x, short y) { return x ^ y; } static short nstl_mangled_lshift_short_short(short x, short y) { return x << y; } static short nstl_mangled_rshift_short_short(short x, short y) { return x >> y; } static short nstl_mangled_iand_short_short(short *self, short other) { return (*self) &= other; } static short nstl_mangled_ior_short_short(short *self, short other) { return (*self) |= other; } static short nstl_mangled_ixor_short_short(short *self, short other) { return (*self) ^= other; } static short nstl_mangled_ilshift_short_short(short *self, short other) { return (*self) <<= other; } static short nstl_mangled_irshift_short_short(short *self, short other) { return (*self) >>= other; }
    static void nstl_mangled_ctor_int(int *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_int(int *self, int other) { *self = other; } static void nstl_mangled_dtor_int(int *self) { do { (void)self; } while (0); } static int *nstl_mangled_new_int(void) { return malloc(sizeof(int)); } static void nstl_mangled_delete_int(int *self) { free(self); } static int nstl_mangled_asg_int_int(int *self, int other) { return (*self) = other; } static int nstl_mangled_add_int_int(int x, int y) { return x + y; } static int nstl_mangled_sub_int_int(int x, int y) { return x - y; } static int nstl_mangled_mul_int_int(int x, int y) { return x * y; } static int nstl_mangled_div_int_int(int x, int y) { return x / y; } static int nstl_mangled_mod_int_int(int x, int y) { return x % y; } static int nstl_mangled_inc_int(int *self) { return ++(*self); } static int nstl_mangled_inc__int(int *self) { return (*self)++; } static int nstl_mangled_dec_int(int *self) { return --(*self); } static int nstl_mangled_dec__int(int *self) { return (*self)--; } static int nstl_mangled_prom_int(int self) { return +self; } static int nstl_mangled_inv_int(int self) { return -self; } static int nstl_mangled_iadd_int_int(int *self, int other) { return (*self) += other; } static int nstl_mangled_isub_int_int(int *self, int other) { return (*self) -= other; } static int nstl_mangled_imul_int_int(int *self, int other) { return (*self) *= other; } static int nstl_mangled_idiv_int_int(int *self, int other) { return (*self) /= other; } static int nstl_mangled_imod_int_int(int *self, int other) { return (*self) %= other; } static nstl_bool nstl_mangled_eq_int_int(int x, int y) { return x == y; } static nstl_bool nstl_mangled_ne_int_int(int x, int y) { return x != y; } static nstl_bool nstl_mangled_gt_int_int(int x, int y) { return x > y; } static nstl_bool nstl_mangled_lt_int_int(int x, int y) { return x < y; } static nstl_bool nstl_mangled_ge_int_int(int x, int y) { return x >= y; } static nstl_bool nstl_mangled_le_int_int(int x, int y) { return x <= y; } static nstl_bool nstl_mangled_not_int(int self) { return !self; } static int nstl_mangled_compl_int(int self) { return ~self; } static int nstl_mangled_and_int_int(int x, int y) { return x & y; } static int nstl_mangled_or_int_int(int x, int y) { return x | y; } static int nstl_mangled_xor_int_int(int x, int y) { return x ^ y; } static int nstl_mangled_lshift_int_int(int x, int y) { return x << y; } static int nstl_mangled_rshift_int_int(int x, int y) { return x >> y; } static int nstl_mangled_iand_int_int(int *self, int other) { return (*self) &= other; } static int nstl_mangled_ior_int_int(int *self, int other) { return (*self) |= other; } static int nstl_mangled_ixor_int_int(int *self, int other) { return (*self) ^= other; } static int nstl_mangled_ilshift_int_int(int *self, int other) { return (*self) <<= other; } static int nstl_mangled_irshift_int_int(int *self, int other) { return (*self) >>= other; }
    static void nstl_mangled_ctor_nstl_ushort(nstl_ushort *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_nstl_ushort(nstl_ushort *self, nstl_ushort other) { *self = other; } static void nstl_mangled_dtor_nstl_ushort(nstl_ushort *self) { do { (void)self; } while (0); } static nstl_ushort *nstl_mangled_new_nstl_ushort(void) { return malloc(sizeof(nstl_ushort)); } static void nstl_mangled_delete_nstl_ushort(nstl_ushort *self) { free(self); } static nstl_ushort nstl_mangled_asg_nstl_ushort_nstl_ushort(nstl_ushort *self, nstl_ushort other) { return (*self) = other; } static nstl_ushort nstl_mangled_add_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x + y; } static nstl_ushort nstl_mangled_sub_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x - y; } static nstl_ushort nstl_mangled_mul_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x * y; } static nstl_ushort nstl_mangled_div_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x / y; } static nstl_ushort nstl_mangled_mod_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x % y; } static nstl_ushort nstl_mangled_inc_nstl_ushort(nstl_ushort *self) { return ++(*self); } static nstl_ushort nstl_mangled_inc__nstl_ushort(nstl_ushort *self) { return (*self)++; } static nstl_ushort nstl_mangled_dec_nstl_ushort(nstl_ushort *self) { return --(*self); } static nstl_ushort nstl_mangled_dec__nstl_ushort(nstl_ushort *self) { return (*self)--; } static nstl_ushort nstl_mangled_prom_nstl_ushort(nstl_ushort self) { return +self; } static nstl_ushort nstl_mangled_inv_nstl_ushort(nstl_ushort self) { return -self; } static nstl_ushort nstl_mangled_iadd_nstl_ushort_nstl_ushort(nstl_ushort *self, nstl_ushort other) { return (*self) += other; } static nstl_ushort nstl_mangled_isub_nstl_ushort_nstl_ushort(nstl_ushort *self, nstl_ushort other) { return (*self) -= other; } static nstl_ushort nstl_mangled_imul_nstl_ushort_nstl_ushort(nstl_ushort *self, nstl_ushort other) { return (*self) *= other; } static nstl_ushort nstl_mangled_idiv_nstl_ushort_nstl_ushort(nstl_ushort *self, nstl_ushort other) { return (*self) /= other; } static nstl_ushort nstl_mangled_imod_nstl_ushort_nstl_ushort(nstl_ushort *self, nstl_ushort other) { return (*self) %= other; } static nstl_bool nstl_mangled_eq_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x == y; } static nstl_bool nstl_mangled_ne_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x != y; } static nstl_bool nstl_mangled_gt_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x > y; } static nstl_bool nstl_mangled_lt_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x < y; } static nstl_bool nstl_mangled_ge_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x >= y; } static nstl_bool nstl_mangled_le_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x <= y; } static nstl_bool nstl_mangled_not_nstl_ushort(nstl_ushort self) { return !self; } static nstl_ushort nstl_mangled_compl_nstl_ushort(nstl_ushort self) { return ~self; } static nstl_ushort nstl_mangled_and_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x & y; } static nstl_ushort nstl_mangled_or_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x | y; } static nstl_ushort nstl_mangled_xor_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x ^ y; } static nstl_ushort nstl_mangled_lshift_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x << y; } static nstl_ushort nstl_mangled_rshift_nstl_ushort_nstl_ushort(nstl_ushort x, nstl_ushort y) { return x >> y; } static nstl_ushort nstl_mangled_iand_nstl_ushort_nstl_ushort(nstl_ushort *self, nstl_ushort other) { return (*self) &= other; } static nstl_ushort nstl_mangled_ior_nstl_ushort_nstl_ushort(nstl_ushort *self, nstl_ushort other) { return (*self) |= other; } static nstl_ushort nstl_mangled_ixor_nstl_ushort_nstl_ushort(nstl_ushort *self, nstl_ushort other) { return (*self) ^= other; } static nstl_ushort nstl_mangled_ilshift_nstl_ushort_nstl_ushort(nstl_ushort *self, nstl_ushort other) { return (*self) <<= other; } static nstl_ushort nstl_mangled_irshift_nstl_ushort_nstl_ushort(nstl_ushort *self, nstl_ushort other) { return (*self) >>= other; }
    static void nstl_mangled_ctor_nstl_uint(nstl_uint *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_nstl_uint(nstl_uint *self, nstl_uint other) { *self = other; } static void nstl_mangled_dtor_nstl_uint(nstl_uint *self) { do { (void)self; } while (0); } static nstl_uint *nstl_mangled_new_nstl_uint(void) { return malloc(sizeof(nstl_uint)); } static void nstl_mangled_delete_nstl_uint(nstl_uint *self) { free(self); } static nstl_uint nstl_mangled_asg_nstl_uint_nstl_uint(nstl_uint *self, nstl_uint other) { return (*self) = other; } static nstl_uint nstl_mangled_add_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x + y; } static nstl_uint nstl_mangled_sub_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x - y; } static nstl_uint nstl_mangled_mul_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x * y; } static nstl_uint nstl_mangled_div_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x / y; } static nstl_uint nstl_mangled_mod_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x % y; } static nstl_uint nstl_mangled_inc_nstl_uint(nstl_uint *self) { return ++(*self); } static nstl_uint nstl_mangled_inc__nstl_uint(nstl_uint *self) { return (*self)++; } static nstl_uint nstl_mangled_dec_nstl_uint(nstl_uint *self) { return --(*self); } static nstl_uint nstl_mangled_dec__nstl_uint(nstl_uint *self) { return (*self)--; } static nstl_uint nstl_mangled_prom_nstl_uint(nstl_uint self) { return +self; } static nstl_uint nstl_mangled_inv_nstl_uint(nstl_uint self) { return -self; } static nstl_uint nstl_mangled_iadd_nstl_uint_nstl_uint(nstl_uint *self, nstl_uint other) { return (*self) += other; } static nstl_uint nstl_mangled_isub_nstl_uint_nstl_uint(nstl_uint *self, nstl_uint other) { return (*self) -= other; } static nstl_uint nstl_mangled_imul_nstl_uint_nstl_uint(nstl_uint *self, nstl_uint other) { return (*self) *= other; } static nstl_uint nstl_mangled_idiv_nstl_uint_nstl_uint(nstl_uint *self, nstl_uint other) { return (*self) /= other; } static nstl_uint nstl_mangled_imod_nstl_uint_nstl_uint(nstl_uint *self, nstl_uint other) { return (*self) %= other; } static nstl_bool nstl_mangled_eq_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x == y; } static nstl_bool nstl_mangled_ne_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x != y; } static nstl_bool nstl_mangled_gt_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x > y; } static nstl_bool nstl_mangled_lt_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x < y; } static nstl_bool nstl_mangled_ge_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x >= y; } static nstl_bool nstl_mangled_le_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x <= y; } static nstl_bool nstl_mangled_not_nstl_uint(nstl_uint self) { return !self; } static nstl_uint nstl_mangled_compl_nstl_uint(nstl_uint self) { return ~self; } static nstl_uint nstl_mangled_and_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x & y; } static nstl_uint nstl_mangled_or_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x | y; } static nstl_uint nstl_mangled_xor_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x ^ y; } static nstl_uint nstl_mangled_lshift_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x << y; } static nstl_uint nstl_mangled_rshift_nstl_uint_nstl_uint(nstl_uint x, nstl_uint y) { return x >> y; } static nstl_uint nstl_mangled_iand_nstl_uint_nstl_uint(nstl_uint *self, nstl_uint other) { return (*self) &= other; } static nstl_uint nstl_mangled_ior_nstl_uint_nstl_uint(nstl_uint *self, nstl_uint other) { return (*self) |= other; } static nstl_uint nstl_mangled_ixor_nstl_uint_nstl_uint(nstl_uint *self, nstl_uint other) { return (*self) ^= other; } static nstl_uint nstl_mangled_ilshift_nstl_uint_nstl_uint(nstl_uint *self, nstl_uint other) { return (*self) <<= other; } static nstl_uint nstl_mangled_irshift_nstl_uint_nstl_uint(nstl_uint *self, nstl_uint other) { return (*self) >>= other; }
    static void nstl_mangled_ctor_long(long *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_long(long *self, long other) { *self = other; } static void nstl_mangled_dtor_long(long *self) { do { (void)self; } while (0); } static long *nstl_mangled_new_long(void) { return malloc(sizeof(long)); } static void nstl_mangled_delete_long(long *self) { free(self); } static long nstl_mangled_asg_long_long(long *self, long other) { return (*self) = other; } static long nstl_mangled_add_long_long(long x, long y) { return x + y; } static long nstl_mangled_sub_long_long(long x, long y) { return x - y; } static long nstl_mangled_mul_long_long(long x, long y) { return x * y; } static long nstl_mangled_div_long_long(long x, long y) { return x / y; } static long nstl_mangled_mod_long_long(long x, long y) { return x % y; } static long nstl_mangled_inc_long(long *self) { return ++(*self); } static long nstl_mangled_inc__long(long *self) { return (*self)++; } static long nstl_mangled_dec_long(long *self) { return --(*self); } static long nstl_mangled_dec__long(long *self) { return (*self)--; } static long nstl_mangled_prom_long(long self) { return +self; } static long nstl_mangled_inv_long(long self) { return -self; } static long nstl_mangled_iadd_long_long(long *self, long other) { return (*self) += other; } static long nstl_mangled_isub_long_long(long *self, long other) { return (*self) -= other; } static long nstl_mangled_imul_long_long(long *self, long other) { return (*self) *= other; } static long nstl_mangled_idiv_long_long(long *self, long other) { return (*self) /= other; } static long nstl_mangled_imod_long_long(long *self, long other) { return (*self) %= other; } static nstl_bool nstl_mangled_eq_long_long(long x, long y) { return x == y; } static nstl_bool nstl_mangled_ne_long_long(long x, long y) { return x != y; } static nstl_bool nstl_mangled_gt_long_long(long x, long y) { return x > y; } static nstl_bool nstl_mangled_lt_long_long(long x, long y) { return x < y; } static nstl_bool nstl_mangled_ge_long_long(long x, long y) { return x >= y; } static nstl_bool nstl_mangled_le_long_long(long x, long y) { return x <= y; } static nstl_bool nstl_mangled_not_long(long self) { return !self; } static long nstl_mangled_compl_long(long self) { return ~self; } static long nstl_mangled_and_long_long(long x, long y) { return x & y; } static long nstl_mangled_or_long_long(long x, long y) { return x | y; } static long nstl_mangled_xor_long_long(long x, long y) { return x ^ y; } static long nstl_mangled_lshift_long_long(long x, long y) { return x << y; } static long nstl_mangled_rshift_long_long(long x, long y) { return x >> y; } static long nstl_mangled_iand_long_long(long *self, long other) { return (*self) &= other; } static long nstl_mangled_ior_long_long(long *self, long other) { return (*self) |= other; } static long nstl_mangled_ixor_long_long(long *self, long other) { return (*self) ^= other; } static long nstl_mangled_ilshift_long_long(long *self, long other) { return (*self) <<= other; } static long nstl_mangled_irshift_long_long(long *self, long other) { return (*self) >>= other; }
    static void nstl_mangled_ctor_nstl_ulong(nstl_ulong *self) { do { (void)self; } while (0); } static void nstl_mangled_copy_ctor_nstl_ulong(nstl_ulong *self, nstl_ulong other) { *self = other; } static void nstl_mangled_dtor_nstl_ulong(nstl_ulong *self) { do { (void)self; } while (0); } static nstl_ulong *nstl_mangled_new_nstl_ulong(void) { return malloc(sizeof(nstl_ulong)); } static void nstl_mangled_delete_nstl_ulong(nstl_ulong *self) { free(self); } static nstl_ulong nstl_mangled_asg_nstl_ulong_nstl_ulong(nstl_ulong *self, nstl_ulong other) { return (*self) = other; } static nstl_ulong nstl_mangled_add_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x + y; } static nstl_ulong nstl_mangled_sub_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x - y; } static nstl_ulong nstl_mangled_mul_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x * y; } static nstl_ulong nstl_mangled_div_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x / y; } static nstl_ulong nstl_mangled_mod_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x % y; } static nstl_ulong nstl_mangled_inc_nstl_ulong(nstl_ulong *self) { return ++(*self); } static nstl_ulong nstl_mangled_inc__nstl_ulong(nstl_ulong *self) { return (*self)++; } static nstl_ulong nstl_mangled_dec_nstl_ulong(nstl_ulong *self) { return --(*self); } static nstl_ulong nstl_mangled_dec__nstl_ulong(nstl_ulong *self) { return (*self)--; } static nstl_ulong nstl_mangled_prom_nstl_ulong(nstl_ulong self) { return +self; } static nstl_ulong nstl_mangled_inv_nstl_ulong(nstl_ulong self) { return -self; } static nstl_ulong nstl_mangled_iadd_nstl_ulong_nstl_ulong(nstl_ulong *self, nstl_ulong other) { return (*self) += other; } static nstl_ulong nstl_mangled_isub_nstl_ulong_nstl_ulong(nstl_ulong *self, nstl_ulong other) { return (*self) -= other; } static nstl_ulong nstl_mangled_imul_nstl_ulong_nstl_ulong(nstl_ulong *self, nstl_ulong other) { return (*self) *= other; } static nstl_ulong nstl_mangled_idiv_nstl_ulong_nstl_ulong(nstl_ulong *self, nstl_ulong other) { return (*self) /= other; } static nstl_ulong nstl_mangled_imod_nstl_ulong_nstl_ulong(nstl_ulong *self, nstl_ulong other) { return (*self) %= other; } static nstl_bool nstl_mangled_eq_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x == y; } static nstl_bool nstl_mangled_ne_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x != y; } static nstl_bool nstl_mangled_gt_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x > y; } static nstl_bool nstl_mangled_lt_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x < y; } static nstl_bool nstl_mangled_ge_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x >= y; } static nstl_bool nstl_mangled_le_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x <= y; } static nstl_bool nstl_mangled_not_nstl_ulong(nstl_ulong self) { return !self; } static nstl_ulong nstl_mangled_compl_nstl_ulong(nstl_ulong self) { return ~self; } static nstl_ulong nstl_mangled_and_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x & y; } static nstl_ulong nstl_mangled_or_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x | y; } static nstl_ulong nstl_mangled_xor_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x ^ y; } static nstl_ulong nstl_mangled_lshift_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x << y; } static nstl_ulong nstl_mangled_rshift_nstl_ulong_nstl_ulong(nstl_ulong x, nstl_ulong y) { return x >> y; } static nstl_ulong nstl_mangled_iand_nstl_ulong_nstl_ulong(nstl_ulong *self, nstl_ulong other) { return (*self) &= other; } static nstl_ulong nstl_mangled_ior_nstl_ulong_nstl_ulong(nstl_ulong *self, nstl_ulong other) { return (*self) |= other; } static nstl_ulong nstl_mangled_ixor_nstl_ulong_nstl_ulong(nstl_ulong *self, nstl_ulong other) { return (*self) ^= other; } static nstl_ulong nstl_mangled_ilshift_nstl_ulong_nstl_ulong(nstl_ulong *self, nstl_ulong other) { return (*self) <<= other; } static nstl_ulong nstl_mangled_irshift_nstl_ulong_nstl_ulong(nstl_ulong *self, nstl_ulong other) { return (*self) >>= other; }
